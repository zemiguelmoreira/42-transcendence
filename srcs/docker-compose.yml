services:
  nginx:
    build: ./nginx
    container_name: nginx
    image: nginx:42
    volumes:
      - nginx-conf:/etc/nginx/conf.d:ro
    ports:
      - "443:443"
    expose:
      - "80"
    depends_on:
      - frontend
    restart: always
    networks:
      - transcendence-net

  frontend:
    build: ./frontend
    container_name: frontend
    image: frontend:42
    volumes:
      - frontend-data:/usr/share/nginx/html:ro
    expose:
      - "80"
    depends_on:
      - user_management
    restart: always
    networks:
      - transcendence-net

  user_management:
    build: ./UserApi
    container_name: userapi
    image: userapi:42
    volumes:
      - user-app:/usr/src/app
    init: true
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    restart: always
    networks:
      - transcendence-net
      - backend-net

  game_server:
    build: ./GameServer
    container_name: game_server
    image: game_server:42
    volumes:
      - game-app:/usr/src/app
    init: true
    ports:
      - "8001:8001"
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    env_file:
      - .env
    depends_on:
      - redis
    restart: always
    networks:
      - transcendence-net
      - backend-net

  chat_server:
    build: ./ChatServer
    container_name: chat_server
    image: chat_server:42
    volumes:
      - chat-app:/usr/src/app
    init: true
    ports:
      - "8002:8002"
    # depends_on:
    #   postgres:
    #     condition: service_healthy
    env_file:
      - .env
    depends_on:
      - redis
    restart: always
    networks:
      - transcendence-net
      - backend-net

  postgres:
    build: ./postgres
    container_name: postgres
    image: postgres:42
    volumes:
      - postgres-data:/var/lib/postgresql/data/:rw
    expose:
      - "5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${SQL_USER}"]
      interval: 5s
      timeout: 4s
      retries: 5
    env_file:
      - .env
    restart: always
    networks:
      - backend-net

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend-net
      - transcendence-net

# DEVOPS SECTION
  elasticsearch:
    build:
      context: ./ElasticSearch
      dockerfile: Dockerfile
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.enabled=true
    ports:
      - "9200:9200"
    volumes:
      - es-data:/usr/share/elasticsearch/data
    env_file:
      - .env
    networks:
      - transcendence-net
      - backend-net

  logstash:
    image: docker.elastic.co/logstash/logstash:7.13.2
    container_name: logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USERNAME=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    ports:
      - "5044:5044"
      - "5959:5959"
    depends_on:
      - elasticsearch
    networks:
      - transcendence-net
      - backend-net
    env_file:
    - .env

  kibana:
    image: docker.elastic.co/kibana/kibana:7.13.2
    container_name: kibana
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=${ELASTIC_USER}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.enabled=true
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - transcendence-net
      - backend-net
    env_file:
    - .env
  
  filebeat:
    user: root
    build:
      context: ./filebeat
      dockerfile: Dockerfile
    container_name: filebeat
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro  # Mapeamento do volume para os logs do Docker
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Adicione para permitir o uso de add_docker_metadata
      - /var/log/filebeat:/var/log/filebeat
    command: ["-e", "-strict.perms=false", "-c", "/usr/share/filebeat/filebeat.yml", "-d", "publish"]
    networks:
      - transcendence-net
      - backend-net
    depends_on:
      - elasticsearch
      - logstash
    env_file:
    - .env

volumes:
  nginx-conf:
    name: nginx-conf
    driver: local
    driver_opts:
      type: none
      device: ./nginx/conf
      o: bind
  frontend-data:
    name: frontend-data
    driver: local
    driver_opts:
      type: none
      device: ./frontend
      o: bind
  user-app:
    name: user-app
    driver: local
    driver_opts:
      type: none
      device: ./UserApi
      o: bind
  chat-app:
    name: chat-app
    driver: local
    driver_opts:
      type: none
      device: ./ChatServer
      o: bind
  game-app:
    name: game-app
    driver: local
    driver_opts:
      type: none
      device: ./GameServer
      o: bind
  postgres-data:
    name: postgres-data
    driver: local
    driver_opts:
      type: none
      device: ${SQL_PATH}
      o: bind
  es-data:
    name: es-data
    driver: local


networks:
  transcendence-net:
    name: transcendence-net
    driver: bridge
  backend-net:
    name: backend-net
    driver: bridge
    internal: true
